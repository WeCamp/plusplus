{% extends "WecampPlusplusBundle:Shared:base.html.twig" %}

{% block title %}Map a Subject{% endblock %}

{% block body %}
    <h1>Maps!</h1>

    {{ form_widget(form.subject) }}

    <div id="map-canvas" style="height: 300px; width: 300px;"></div>
{% endblock %}

{% block javascript %}

    {# TODO: The Api Key should not be hard-coded here! #}
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDB4K14MyLa8AUbPNs2pN4VXwAXh-BUdWk"></script>

    <script type="text/javascript" src="{{ app.request.basepath }}/bundles/wecampplusplus/moment.js-2.8.2/moment.js"></script>

    <script type="text/javascript">
        var map;    // TODO: This should not be global!
        var mapElem;
        var markerList = [];

        (function() {
            'use strict';

            // Setup google maps
            function initialize() {

                // Fixup width
                var width = $('.container').width();
                $('#map-canvas')
                    .width(width)
                    .height(width / 2);


                mapElem = $('#map-canvas');

                var mapOptions = {
                    center: new google.maps.LatLng(53.6163601,-2.420925),
                    zoom: 6
                };
                map = new google.maps.Map(
                    mapElem[0],
                    mapOptions
                );
            }
            google.maps.event.addDomListener(window, 'load', initialize);


            $(document).on(
                'ready',
                function() {


                    // Listen for select change
                    $('select[name="subject"]').on(
                        'change',
                        function() {
                            getPlusOneData($(this).val());
                        }
                    );
                }
            );
        })();

        var baseRoute = '{{ path('_getPlusOneSubject', { subjectId: '__id__' }) }}';

        // Perform an ajax lookup of subject plus one data
        function getPlusOneData(id) {

            $.ajax(
                baseRoute.replace('__id__', id),
                {
                    type: 'GET'
                }
            ).done(updateMap);
        }

        /**
         * Clear any previously added markers.
         */
        function clearMarkers() {
            var j;

            for (j = 0; j < markerList.length; j++) {
                markerList[j].setMap(null);
            }

            markerList = [];
        }

        /**
         * Add markers for the latitude / longitude provided
         */
        function addMarkers(latLongList) {
            var j;
            var marker;

            for (j = 0; j < latLongList.length; j++) {

                marker = new google.maps.Marker({
                    map: map,
                    position: new google.maps.LatLng(
                        latLongList[j].latitude,
                        latLongList[j].longitude
                    ),
                    title: moment(latLongList[j].created).format('ddd Do MMM [\']YY')
                });

                markerList.push(marker);
            }
        }

        /**
         * Update the map with the new coordinates
         */
        function updateMap(latLongList) {

            // Only proceed if we have some coords
            if (latLongList.length) {

                var bounds = getMapBounds(latLongList);
                var center = getCenterFromBounds(bounds);
                var zoom = getZoomLevelFromBounds(
                    bounds,
                    {
                        width: mapElem.width(),
                        height: mapElem.height()
                    }
                );

                clearMarkers();
                addMarkers(latLongList);

                if (zoom > 16) {
                    zoom = 16;
                }
                map.setCenter(center);
                map.setZoom(zoom);

            } else {
                clearMarkers();
            }
        }

        /**
         * Get map boundries from array of latitude & longitudes.
         *
         * @param latLongList
         *
         * @returns {min_lat: undefined, max_lat: undefined, min_long: undefined, max_long: undefined}
         */
        function getMapBounds(latLongList) {
            'use strict';

            var bounds = {
                min_lat: undefined,
                max_lat: undefined,
                min_long: undefined,
                max_long: undefined
            };
            var latLong;
            var i;

            for (i = 0; i < latLongList.length; i++) {
                latLong = latLongList[i];
                if (isNaN(bounds.min_lat) || latLong.latitude < bounds.min_lat) {
                    bounds.min_lat = parseFloat(latLong.latitude);
                }
                if (isNaN(bounds.max_lat) || latLong.latitude > bounds.max_lat) {
                    bounds.max_lat = parseFloat(latLong.latitude);
                }
                if (isNaN(bounds.min_long) || latLong.longitude < bounds.min_long) {
                    bounds.min_long = parseFloat(latLong.longitude);
                }
                if (isNaN(bounds.max_long) || latLong.longitude > bounds.max_long) {
                    bounds.max_long = parseFloat(latLong.longitude);
                }
            }

            return bounds;
        }

        /** Calculate the centre point from a boundries object.
         *
         * @param bounds
         * @returns {google.maps.LatLng}
         */
        function getCenterFromBounds(bounds) {
            'use strict';
            var diffLat = bounds.max_lat - bounds.min_lat;
            var diffLong = bounds.max_long - bounds.min_long;
            return new google.maps.LatLng(
                    bounds.min_lat + (diffLat / 2),
                    bounds.min_long + (diffLong / 2)
            );
        }
        /** Get the zoom level from bounds.
         *
         * @param bounds
         * @param mapDim Dimensions of the map in pixels
         *
         * @returns {number}
         */
        function getZoomLevelFromBounds(bounds, mapDim) {
            'use strict';
            var WORLD_DIM = { height: 256, width: 256 };
            var ZOOM_MAX = 21;
            function latRad(lat) {
                var sin = Math.sin(lat * Math.PI / 180);
                var radX2 = Math.log((1 + sin) / (1 - sin)) / 2;
                return Math.max(Math.min(radX2, Math.PI), -Math.PI) / 2;
            }
            function zoom(mapPx, worldPx, fraction) {
                return Math.floor(Math.log(mapPx / worldPx / fraction) / Math.LN2);
            }
            var latFraction = (latRad(bounds.max_lat) - latRad(bounds.min_lat)) / Math.PI;
            var lngDiff = bounds.max_long - bounds.min_long;
            var lngFraction = ((lngDiff < 0) ? (lngDiff + 360) : lngDiff) / 360;
            var latZoom = zoom(mapDim.height, WORLD_DIM.height, latFraction);
            var lngZoom = zoom(mapDim.width, WORLD_DIM.width, lngFraction);
            return Math.min(latZoom, lngZoom, ZOOM_MAX);
        }

    </script>
{% endblock %}